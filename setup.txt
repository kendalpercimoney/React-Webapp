docker pull node:20-alpine

Used docker and plan on using it in the future with node js

Tried to install using docker, but decided to leave it to the future. 

Installed using msi file, had to restart before it showed up in terminal

npx create-react-app react-webapp --use-npm was supposed to do the trick, but threw error code enoent

----------------------------
----------------------------
PS C:\Users\HP\Documents\GitHub> npx create-react-app react-webapp --use-npm

Creating a new React app in C:\Users\HP\Documents\GitHub\react-webapp.

Installing packages. This might take a couple of minutes.
Installing react, react-dom, and react-scripts with cra-template...


added 1476 packages in 3m

258 packages are looking for funding
  run `npm fund` for details

Installing template dependencies using npm...

added 67 packages, and changed 1 package in 24s

262 packages are looking for funding
  run `npm fund` for details
Removing template package using npm...


removed 1 package, and audited 1543 packages in 6s

262 packages are looking for funding
  run `npm fund` for details

8 vulnerabilities (2 moderate, 6 high)

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

Success! Created react-webapp at C:\Users\HP\Documents\GitHub\react-webapp      
Inside that directory, you can run several commands:

  npm start
    Starts the development server.

  npm run build
    Bundles the app into static files for production.

  npm test
    Starts the test runner.

  npm run eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you canâ€™t go back!

We suggest that you begin by typing:

  cd react-webapp
  npm start

Happy hacking!
PS C:\Users\HP\Documents\GitHub>
----------------------------
----------------------------

It finally installed! Honestly shouldn't be this hard.
Mac will be interesting.

npm run build fails if you cd to the location but use wrong capitalization.

'serve -s build' starts the static server

'running scripts is disabled on this system' so can't run build.

--
Node isn't preinstalled on mac with the things I have installed so far

Got it to work. Tried to brew install but didn't restart terminal so probably why node -v didn't work. 
Followed text on node website to install using nvm (curl) to work. 

> npm needed to be fixed with npm install. 

> According to react course, vite should be used to install node.

>>> npm create vite@latest react-project for using vite
npm install needs to be used every time a project is created.

npm run dev is used to start dev server.

----

npm install after opening project snapshot

----

JS is used in its own file for maintainability.

type module and defer
module and import /js attriute in html
export from other js file

react build process injects these script tags for you.
We don't add script tags.
Package.js handles these
----

The build process optimizes the code for production (minification).
Node JS is used for npm, setting up, and the build process

In react, importing and exporting is used a lot, it's a best practice to split 
code over multiple files for maintainability.

JS variables use "let" for creation.
the keyword export means that a variable is accessable outside of the file as well.
You can then import it in the file you want to use it in.

import { apikey } from "./util.js";

in react, the .js extension is obmitted.
needs a "type module" to use export and import in vanilla. not used in the build process for compatibility.

console.log(); for logging to console

export default "whateveritis"; << can only have one per file. No variable init or assign
export let apikey = "whateveritis";
----
one component (js function) per file.
exporting, importing multiple things:
import { apikey, abc } from "./util.js";.

You can also use all from a file (as an object) with 
import * as util
then
console.log(util.abc);

as can also be used to alias > import { apikey, abc as content } from "./util.js";.

----------------
Identifiers should follow certain rules: 
- must not contain whitespace or special characters except $ and _
- may contain numbers but not start with a number
- must not clash with reserved keywords (user, const, if...)
- should use camelCasing
- should describe the thing it identifies, contains, or does.

=== used to check equality

functions: 
function greet() {} //define
greet(); //call

create a default value that can be overwritten: 
function greetUser(message = hello) {
  console.log (message);
} //define
greetUser("hi"); //call

you can return a string
return message + "Samsung";

console.log (greetUser("Hi there"))
//to pull return from function. you can store it in a variable first for readability.

