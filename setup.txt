docker pull node:20-alpine

Used docker and plan on using it in the future with node js

Tried to install using docker, but decided to leave it to the future. 

Installed using msi file, had to restart before it showed up in terminal

npx create-react-app react-webapp --use-npm was supposed to do the trick, but threw error code enoent

----------------------------
----------------------------
PS C:\Users\HP\Documents\GitHub> npx create-react-app react-webapp --use-npm

Creating a new React app in C:\Users\HP\Documents\GitHub\react-webapp.

Installing packages. This might take a couple of minutes.
Installing react, react-dom, and react-scripts with cra-template...


added 1476 packages in 3m

258 packages are looking for funding
  run `npm fund` for details

Installing template dependencies using npm...

added 67 packages, and changed 1 package in 24s

262 packages are looking for funding
  run `npm fund` for details
Removing template package using npm...


removed 1 package, and audited 1543 packages in 6s

262 packages are looking for funding
  run `npm fund` for details

8 vulnerabilities (2 moderate, 6 high)

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

Success! Created react-webapp at C:\Users\HP\Documents\GitHub\react-webapp      
Inside that directory, you can run several commands:

  npm start
    Starts the development server.

  npm run build
    Bundles the app into static files for production.

  npm test
    Starts the test runner.

  npm run eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you canâ€™t go back!

We suggest that you begin by typing:

  cd react-webapp
  npm start


Happy hacking!
PS C:\Users\HP\Documents\GitHub>
----------------------------
----------------------------

It finally installed! Honestly shouldn't be this hard.
Mac will be interesting.

npm run build fails if you cd to the location but use wrong capitalization.

'serve -s build' starts the static server

'running scripts is disabled on this system' so can't run build.

--
Node isn't preinstalled on mac with the things I have installed so far

Got it to work. Tried to brew install but didn't restart terminal so probably why node -v didn't work. 
Followed text on node website to install using nvm (curl) to work. 

> npm needed to be fixed with npm install. 

> According to react course, vite should be used to install node.

>>> npm create vite@latest react-project for using vite
npm install needs to be used every time a project is created.

npm run dev is used to start dev server.

----

npm install after opening project snapshot

----

JS is used in its own file for maintainability.

type module and defer
module and import /js attriute in html
export from other js file

react build process injects these script tags for you.
We don't add script tags.
Package.js handles these
----

The build process optimizes the code for production (minification).
Node JS is used for npm, setting up, and the build process

In react, importing and exporting is used a lot, it's a best practice to split 
code over multiple files for maintainability.

JS variables use "let" for creation.
the keyword export means that a variable is accessable outside of the file as well.
You can then import it in the file you want to use it in.

import { apikey } from "./util.js";

in react, the .js extension is obmitted.
needs a "type module" to use export and import in vanilla. not used in the build process for compatibility.

console.log(); for logging to console

export default "whateveritis"; << can only have one per file. No variable init or assign
export let apikey = "whateveritis";
----
one component (js function) per file.
exporting, importing multiple things:
import { apikey, abc } from "./util.js";.

You can also use all from a file (as an object) with 
import * as util
then
console.log(util.abc);

as can also be used to alias > import { apikey, abc as content } from "./util.js";.

----------------
Identifiers should follow certain rules: 
- must not contain whitespace or special characters except $ and _
- may contain numbers but not start with a number
- must not clash with reserved keywords (user, const, if...)
- should use camelCasing
- should describe the thing it identifies, contains, or does.

=== used to check equality

functions: 
function greet() {} //define
greet(); //call

create a default value that can be overwritten: 
function greetUser(message = hello) {
  console.log (message);
} //define
greetUser("hi"); //call

you can return a string
return message + "Samsung";

console.log (greetUser("Hi there"))
//to pull return from function. you can store it in a variable first for readability.

----

Anonymous functions: 
function types: 

function () {
  console.log('hello');
}

or 

export default function () {
  console.log('hello');
}

or 

export default () => {
  console.log('hello');
}
--
Instead of 
(number) => {
  number * 3;
}

you can use 

(number) => number * 3; // return keyword must be obmitted.

if statements can't be returned in this.

Creating an object: 
number => ({ age: number });

---

Object: 

const user = {
  name: "Max",
  age: 34
  greet(){ //method
    console.log(this.age)
    console.log("hello world")
  }
};

console.log(user);

or 

console.log(user.max);

class is a blueprint that can then be used to create objects later

class User {                //upper case first letter
  constructor(name, age){   //can do this
    this.name = name;
    this.age = age;
  }

  greet(){
    console.log("hello world")
  }
}

//usage
const user1 new User("Manual", 35);
console.log(user1);
user1.greet();

------

//arrays

const hobbies = ["Sports", "Cooking", "Reading"];
console.log(hobbies[0])
console.log(hobbies) //square brackets to access array

//arrays can contain a multitude of values including arrays.
//Utility array methods:

hobbies.push("Working");
hobbies.findindex can also take functions as inputs.

hobbies.findIndex((item) => {   // will return location if found.
  return item === 'Sports' ;
});

can also be written like this: 

hobbies.findIndex((item) => item === 'Sports'); //defines function, has process, returns value

----------
Map:

Arrays are special types of objects
hobbies.map((item) => item + "!"); // will transform each item in the array
//used for jsx elements

const editedHobbies = hobbies.map((item) => ({text: item})); //creates an object for each item with text

Methods are functions that belong to an object.
-------
O(1) - an if statement is an example of this
Olog(n) - processing halves every cycle
O(n) - complexity increases at the same rate as processes (searching by comparing items in a list one by one) 


------ objects

// Define an object using object literal syntax
let person = {
  name: 'John Doe',
  age: 30,
  occupation: 'Developer'
};

// Accessing values
console.log(person.name);       // Output: John Doe
console.log(person.age);        // Output: 30
console.log(person.occupation); // Output: Developer

// Adding a new property
person.city = 'New York';

// Modifying an existing property
person.age = 31;

console.log(person);

//methods in objects

let person = {
  name: 'John Doe',
  age: 30,
  occupation: 'Developer',
  greet: function() {
    console.log('Hello, my name is ' + this.name);
  }
};

// Calling the method
person.greet(); // Output: Hello, my name is John Doe

----- destructuring arrays

const userNameData = ["Max", "Lucado"];
const firstName = userNameData[0];
const lastName = userNameData[1];

// shorter way
const [firstName, lastName] = ["Max", "Lucado"]; //assigns to variables

console.log(firstName);
console.log(lastName);

// works for objects too 

const{name, age} = { //have to use defined field names due to not being defined by position.
  name: "max",
  age: 33
}

// or with alias: (custom variable name) 
const{name: userName, age} = { 
  name: "max",
  age: 33
}

console.log(userName);
console.log(age);

Destructuring in Function Parameter Lists might be worth going back to.

----- the spread operator (...)
merging lists.

const hobbies = ["Sports", "Cooking", "Reading"];

const newHobbies = ["Thinking"];

//instead of using the following which will create two nested arrays
const mergedHobbies = [hobbies, newHobbies];

//We use the spread operator to combine them in the way we want
const mergedHobbies = [...hobbies, ...newHobbies];

//You can also use it with objects
const user = {
name: "Max" age:
34
} ;

const extendedUser = {
isAdmin: true,
...user
};

console.log (extendedUser);

//This will add the properties into this new object
//as if they were already in the object

----------- for loop

const hobbies = ["Sports", "Cooking"];

for (const hobby of hobbies) {
console.log(hobby);
}

//The above is a for loop that creates a new constant for every iteration (item) in the array

-----------  manipulating the DOM

reach out to a loaded website and read/manipulate it?
a strength of JS

don't do in react as react does it for us

const list = document.querySelector ("ul");
list.remove();

--------- functions as values to other functions

To pass a function as a value (returned), don't use ()

setTimeout(handleTimeout)

has to do with time of excecution.

--

function handleTimeout () {
console.log("Timed out!");
}


const handleTimeout2 = () => {
console.log("Timed out ... again!");
};

setTimeout (handleTimeout, 2000) ; setTimeout (handleTimeout2,
3000);
setTimeout (() => {
  console.log ("More timing out...") ;
}, 4000);

--

Funky passing of functions.

function greeter(greetFn){
  greetFn();
}

greeter (() => console. log ("Hi"));

---------------- you can define functions inside functions

functions can only be accessed inside function in which it's created.

(scope)


---------- references vs primatives

primatives aren't edited 

let userMessage = 'Hello';
editing this string with = or concat will change the address of the variable

arrays are objects (reference values)
you can const an object, but you can still edit it with a method

it keeps the address

if you try assign with = it still won't work cause you'll be editing the address

------------ Finished JS recap!

Components: JSX, props, state

All code is together instead of in different files.

JSX exstension, won't work in browser, needs to be pur together by react.

Component rules: 
- Must start with an uppercase character.
- Must return renderable content.

Each should have its own file.

command / in vs code formats document and adds parentheses in right places.

---- You can use components inside components with <Header></Header> or <Header /> ----

Component example: 

function Header() {
  return (
    <header>
      <img src="src/assets/react-core-concepts.png" alt="Stylized atom" />
      <h1>React Essentials</h1>
      <p>
        Fundamental React concepts you will need for almost any app you are going to build!
      </p>
    </header>
  );
}

Usage: 
Header();

The DOM is the elements that show up on the screen. The code that react converts everything to dynamically. 

Built in components must have a lowercase letter, it's how react tells the difference. 

---------------------------

https://dev.to/vyan/top-10-reactjs-tips-and-tricks-everyone-should-know-2m18






